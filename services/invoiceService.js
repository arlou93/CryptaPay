const { messageCreator } = require("../helpers/messageCreator");
const User = require("../models/User.model");

async function generateInvoice(ctx) {
  const args = ctx.message.text.split(" ");
  if (args.length !== 2 || isNaN(parseFloat(args[1]))) {
    await ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/invoice <—Å—É–º–º–∞>`", { parse_mode: "Markdown" });
    return;
  }

  const amount = parseFloat(args[1]);
  if (amount <= 0) {
    await ctx.reply("‚ùå –°—É–º–º–∞ —Å—á–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", { parse_mode: "Markdown" });
    return;
  }

  const senderId = ctx.from.id;
  const senderUsername = ctx.from.username || `user_${senderId}`;

  const user = await User.findOne({ where: { telegramId: senderId } });
  if (!user || !user.walletAddress) {
    const message = {
      text: "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤*",
      options: {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data: "connect" }],
            [{ text: "–°–æ–∑–¥–∞—Ç—å", callback_data: "create" }]
          ]
        }
      }
    }

    await ctx.replyWithMarkdown(message.text, message.options);
    return;
  }

  // 1Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø–æ–¥—Å–∫–∞–∑–∫–∞)
  const senderMessage = messageCreator([
    {
      items: ["*–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!* –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ —Ç–æ–º—É, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å ‚Üì"]
    }
  ]);

  const receiverMessage = messageCreator([
    {
      title: `üßæ *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç @${senderUsername}*`,
      items: [
        `üí∞ *–°—É–º–º–∞:* ${amount} USDT`,
        `üí° –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ –±–æ—Ç–µ:\n`,
        `\`/send ${amount} @${senderUsername}\``
      ]
    }
  ], [
    [{ text: "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –≤ –±–æ—Ç–µ", url: `https://t.me/${ctx.me}` }]
  ]);

  await ctx.replyWithMarkdown(senderMessage.text, senderMessage.options);
  await ctx.replyWithMarkdown(receiverMessage.text, receiverMessage.options);
}

module.exports = { generateInvoice };
