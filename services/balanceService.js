const User = require("../models/User.model");
const { ethers } = require("ethers");
const { ethProvider } = require("../config/providers");
const logger = require("../config/logger");
const { walletNotFoundMessage } = require("../helpers/commonMessages");

async function getBalance(ctx) {
  const chatId = ctx.from.id;

  try {
    const user = await User.findOne({ where: { telegramId: chatId } });

    if (!user || !user.walletAddress) {
      const { text, options } = walletNotFoundMessage
      await ctx.replyWithMarkdown(text, options);
      return;
    }

    const balanceWei = await ethProvider.getBalance(user.walletAddress);
    const balanceEth = ethers.formatEther(balanceWei);

    await ctx.reply(`üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balanceEth} ETH`);
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å: ${balanceEth} ETH`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${error.message}`);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

module.exports = { getBalance };
