const { redis } = require("../config/redis");
const User = require("../models/User.model");
const crypto = require("crypto");
const { verifyMessage } = require("ethers");
const { messageCreator } = require("../helpers/messageCreator");

const users = new Map();

const existingWalletMessage = (wallet) => messageCreator([
  {
    title: "‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫*",
    items: [
      wallet
    ]
  }
], [
  [{ text: "üîå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data: "disconnect" }]
]);

const walletConnectMessage = messageCreator([
  {
    items: [
      "*1.* –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫",
      "*2.* –ü–æ–¥–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
      "*3.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å —Å—é–¥–∞"
    ]
  },
  {
    items: [
      "*‚úçÔ∏è –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ ‚Üì*"
    ]
  }
]);

const connectedWallet = (wallet)=> messageCreator([
  {
    title: "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!*",
  },
  {
    title: "üìç *–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:*",
    items: [
      wallet
    ]
  },
  {
    title: "üí≥ *–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*",
    items: [
      "/send amount `@user` ‚Äì –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ USDT",
      "/invoice amount ‚Äì –ü–æ–ª—É—á–∏—Ç—å USDT",
      "/balance ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    ]
  },
])

const errorConnection = messageCreator([
  {
    title: "üîê *–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å—å—é*",
  },
  {
    title: "–ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:",
    items: [
      "*1.* –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
      "*2.* –ü–æ–¥–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–µ—Ä–Ω–æ",
    ]
  },
  {
    title: "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å",
  },
], [
  [
    { text: "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data: "connect" },
  ]
])


async function connectWallet(ctx) {
  const chatId = ctx.from.id;
  let existingWallet = await redis.get(`wallet:${chatId}`);

  if (!existingWallet) {
    const user = await User.findOne({ where: { telegramId: chatId } });
    if (user) {
      existingWallet = user.walletAddress;
      await redis.set(`wallet:${chatId}`, existingWallet, 'EX', 3600);
    }
  }

  if (existingWallet) {
    const { text, options } = existingWalletMessage(existingWallet);
    await ctx.replyWithMarkdown(text, options);
    return;
  }

  const nonce = crypto.randomBytes(16).toString('hex');
  users.set(chatId, { nonce });
  await redis.set(`nonce:${chatId}`, nonce, 'EX', 300);

  const { text, options } = walletConnectMessage;

  await ctx.replyWithMarkdown(text, options);
  await ctx.reply(nonce)
}

async function catchWalletAddress(ctx) {
  const chatId = ctx.from.id;
  const username = ctx.from.username || null;
  const user = users.get(chatId);

  if (!user || !ctx.message.text) {
    return;
  }

  try {
    const signature = ctx.message.text.trim();
    const recoveredAddress = verifyMessage(user.nonce, signature);

    await User.create({ telegramId: chatId, walletAddress: recoveredAddress, username });

    const { text, options } = connectedWallet(recoveredAddress);

    await ctx.replyWithMarkdown(text, options);
    users.delete(chatId);
  } catch (error) {
    const { text, options } = errorConnection;

    await ctx.replyWithMarkdown(text, options);
  }
}

module.exports = { connectWallet, catchWalletAddress };
