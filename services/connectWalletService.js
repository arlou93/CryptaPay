const { redis } = require("../config/redis");
const User = require("../models/User.model");
const crypto = require("crypto");
const { verifyMessage } = require("ethers");

const users = new Map();

async function connectWallet(ctx) {
  const chatId = ctx.from.id;
  let existingWallet = await redis.get(`wallet:${chatId}`);
  if (!existingWallet) {
    const user = await User.findOne({ where: { telegramId: chatId } });
    if (user) {
      existingWallet = user.walletAddress;
      await redis.set(`wallet:${chatId}`, existingWallet, 'EX', 3600);
    }
  }

  if (existingWallet) {
    await ctx.reply(
      `*‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!*\n\n` +
      `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:\n` +
      `\`${existingWallet}\`\n\n` +
      `–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫:\n` +
      `1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–µ—Ä–µ–∑ /disconnect\n` +
      `2Ô∏è‚É£ –ó–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`,
      { parse_mode: 'Markdown' }
    );
    return;
  }

  const nonce = crypto.randomBytes(16).toString('hex');
  users.set(chatId, { nonce });
  await redis.set(`nonce:${chatId}`, nonce, 'EX', 300);

  await ctx.reply(
    `*üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞*\n\n` +
    `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ\n` +
    `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ–º –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–µ\n` +
    `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n` +
    `*–í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:*`,
    { parse_mode: 'Markdown' }
  );
  await ctx.reply(`\`${nonce}\``, { parse_mode: 'Markdown' });
}

async function catchWalletAddress(ctx) {
  const chatId = ctx.from.id;
  const username = ctx.from.username || null;
  const user = users.get(chatId);

  if (!user || !ctx.message.text) {
    return;
  }

  try {
    const signature = ctx.message.text.trim();
    const recoveredAddress = verifyMessage(user.nonce, signature);

    await User.create({ telegramId: chatId, walletAddress: recoveredAddress, username });

    await ctx.reply(
      `*üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n` +
      `*‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n\n` +
      `üìç *–ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:*\n` +
      `\`${recoveredAddress}\`\n\n` +
      `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
      `üí∏ /send - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n` +
      `‚ùå /disconnect - –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n\n` +
      `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ`,
      { parse_mode: 'Markdown' }
    );
    users.delete(chatId);
  } catch (error) {
    await ctx.reply(
      `*‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏*\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n` +
      `1Ô∏è‚É£ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞\n` +
      `2Ô∏è‚É£ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∏\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞.`,
      { parse_mode: 'Markdown' }
    );
  }
}

module.exports = { connectWallet, catchWalletAddress };
