const { ethers } = require("ethers");
const { ethProvider, bscProvider, polygonProvider, tronProvider } = require("../config/providers");
const User = require("../models/User.model");
const logger = require("../config/logger");
const { getBestNetwork } = require("./networkService");
const { walletNotFoundMessage } = require("../helpers/commonMessages");

async function generateUnsignedTransaction(senderId, username, amount) {
  try {
    const sender = await User.findOne({ where: { telegramId: senderId } });
    const recipient = await User.findOne({ where: { username } });

    if (!sender || !recipient) {
      return { success: false, error: "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }

    const senderBalanceWei = await ethProvider.getBalance(sender.walletAddress);
    const senderBalance = ethers.formatEther(senderBalanceWei);

    if (parseFloat(senderBalance) < amount) {
      return { success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" };
    }

    const nonce = await ethProvider.getTransactionCount(sender.walletAddress, "latest");
    const feeData = await ethProvider.getFeeData();
    const gasPrice = feeData.gasPrice;
    const amountWei = ethers.parseEther(amount.toString());

    const tx = {
      to: recipient.walletAddress,
      value: amountWei.toString(),
      gasLimit: ethers.toNumber(21000),
      gasPrice: gasPrice.toString(),
      nonce,
      chainId: await ethProvider.getNetwork().then((n) => n.chainId),
    };

    return { success: true, tx };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function sendSignedTransaction(senderId, rawSignedTx) {
  try {
    const sender = await User.findOne({ where: { telegramId: senderId } });
    if (!sender) {
      return { success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }

    const txResponse = await ethProvider.sendTransaction(rawSignedTx);
    await txResponse.wait();

    return { success: true, txHash: txResponse.hash };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function handleTransaction(ctx) {
  const args = ctx.message.text.split(" ");
  if (args.length !== 3) {
    await ctx.reply("üëâ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏: /send <—Å—É–º–º–∞> @username");
    return;
  }

  const amount = parseFloat(args[1]);
  const username = args[2].replace("@", "");
  const senderId = ctx.from.id;

  // üîπ Check if sender has a registered wallet
  const sender = await User.findOne({ where: { telegramId: senderId } });
  if (!sender) {
    const { text, options } = walletNotFoundMessage
    await ctx.replyWithMarkdown(text, options);
    return;
  }

  // üîπ Check if recipient exists
  const recipient = await User.findOne({ where: { username } });
  if (!recipient) {
    await ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª –∫–æ—à–µ–ª–µ–∫. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /connect, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã.");
    return;
  }

  // üîπ Determine the cheapest network to use
  const bestNetwork = await getBestNetwork();

  let provider;
  if (bestNetwork === "ETH") provider = ethProvider;
  if (bestNetwork === "BSC") provider = bscProvider;
  if (bestNetwork === "POLYGON") provider = polygonProvider;

  // üîπ If the chosen network is Tron, we must handle it differently
  if (bestNetwork === "TRON") {
    try {
      const senderBalance = await tronProvider.trx.getBalance(sender.walletAddress);
      const amountTron = tronProvider.toSun(amount); // Convert to TRX format

      if (senderBalance < amountTron) {
        await ctx.reply(`üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TRX –≤ —Å–µ—Ç–∏ Tron –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${senderBalance / 1e6} TRX`);
        return;
      }

      const tx = await tronProvider.transactionBuilder.sendTrx(recipient.walletAddress, amountTron, sender.walletAddress);
      const signedTx = await tronProvider.trx.sign(tx);
      const result = await tronProvider.trx.sendRawTransaction(signedTx);

      if (result.result) {
        await ctx.reply(
          `üí∏ ${amount} USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Tron (TRC-20) @${username}!\n` +
          `üîç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ TronScan](https://tronscan.org/#/transaction/${result.txid})`
        );

        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –æ—Ç–ø—Ä–∞–≤–∏–ª ${amount} USDT —á–µ—Ä–µ–∑ Tron –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}. TX: ${result.txid}`);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Tron");
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç ${senderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} —á–µ—Ä–µ–∑ Tron: ${error.message}`);
      await ctx.reply("üîÑ –°–µ—Ç—å Tron —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —á—É—Ç—å –ø–æ–∑–∂–µ");
    }
    return;
  }

  // üîπ Check sender's balance in the chosen EVM network
  const senderBalanceWei = await provider.getBalance(sender.walletAddress);
  const senderBalance = ethers.formatEther(senderBalanceWei);
  if (parseFloat(senderBalance) < amount) {
    await ctx.reply(`üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ ${bestNetwork}: ${senderBalance}`);
    return;
  }

  // üîπ If amount >100 USDT, send unsigned transaction
  if (amount > 100) {
    const txData = await generateUnsignedTransaction(senderId, username, amount, bestNetwork);
    if (!txData.success) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${txData.error}`);
      return;
    }

    await ctx.reply(
      `üîê *–ü–æ–¥–ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask/WalletConnect*\n\n` +
      `üìÑ *Raw Transaction JSON:*\n\`${JSON.stringify(txData.tx, null, 2)}\`\n\n` +
      `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç JSON\n` +
      `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ MetaMask\n` +
      `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–Ω–µ`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // üîπ Sending the transaction in the best network
  try {
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const tx = await wallet.sendTransaction({
      to: recipient.walletAddress,
      value: ethers.parseEther(amount.toString()),
    });

    await tx.wait();
    await ctx.reply(
      `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} USDT —á–µ—Ä–µ–∑ —Å–µ—Ç—å ${bestNetwork} @${username}!\nüîó [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è](https://etherscan.io/tx/${tx.hash})`
    );
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –æ—Ç–ø—Ä–∞–≤–∏–ª ${amount} USDT —á–µ—Ä–µ–∑ ${bestNetwork} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}. TX: ${tx.hash}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç ${senderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}: ${error.message}`);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleSignedTransaction(ctx) {
  const senderId = ctx.from.id;
  const rawSignedTx = ctx.message.text.trim();

  if (!rawSignedTx.startsWith("0x")) {
    return;
  }

  const result = await sendSignedTransaction(senderId, rawSignedTx);
  if (!result.success) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
    return;
  }

  await ctx.reply(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ](https://etherscan.io/tx/${result.txHash})`);
}

module.exports = { handleTransaction, handleSignedTransaction };
