const { ethers } = require("ethers");
const { ethProvider, bscProvider } = require("../config/providers");
const User = require("../models/User.model");
const logger = require("../config/logger");

async function sendTransaction(privateKey, recipient, amount, network) {
  try {
    let provider;
    if (network === 'ETH') {
      provider = ethProvider;
    } else if (network === 'BSC') {
      provider = bscProvider;
    } else {
      throw new Error('–°–µ—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }

    const wallet = new ethers.Wallet(privateKey, provider);
    const amountWei = ethers.parseEther(amount.toString());

    const tx = await wallet.sendTransaction({
      to: recipient,
      value: amountWei,
    });

    await tx.wait();
    return { success: true, txHash: tx.hash };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    return { success: false, error: error.message };
  }
}

async function sendCryptoTransaction(ctx) {
  const args = ctx.message.text.split(' ');
  if (args.length !== 3) {
    await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <—Å—É–º–º–∞> <@username>');
    return;
  }

  const amount = parseFloat(args[1]);
  const username = args[2].replace('@', '');
  const senderId = ctx.from.id;

  if (amount > 100) {
    const txData = await generateUnsignedTransaction(senderId, username, amount);

    if (!txData.success) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${txData.error}`);
      return;
    }

    await ctx.reply(
      `üîê *–ü–æ–¥–ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask/WalletConnect*\n\n` +
      `üìÑ *Raw Transaction JSON:*\n\`${JSON.stringify(txData.tx, null, 2)}\`\n\n` +
      `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç JSON\n` +
      `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ MetaMask\n` +
      `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–Ω–µ\n\n` +
      `üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ (—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –≤ MetaMask)`,
      { parse_mode: "Markdown" }
    );

    return;
  }

  try {
    const sender = await User.findOne({ where: { telegramId: senderId } });
    const recipient = await User.findOne({ where: { username } });

    if (!sender || !recipient) {
      await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–º–æ—â—å—é /connect');
      return;
    }

    const balanceWei = await ethProvider.getBalance(sender.walletAddress);
    const balanceEth = ethers.formatEther(balanceWei);

    if (parseFloat(balanceEth) < amount) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å ${balanceEth} ETH`);
      return;
    }

    const txResult = await sendTransaction(process.env.PRIVATE_KEY, recipient.walletAddress, amount, 'ETH');

    if (!txResult.success) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + txResult.error);
      return;
    }

    await ctx.reply(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount} ETH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}.\n\nüîó [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ](https://etherscan.io/tx/${txResult.txHash})`);
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –æ—Ç–ø—Ä–∞–≤–∏–ª ${amount} ETH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}. TX: ${txResult.txHash}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç ${senderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}: ${error.message}`);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = { sendCryptoTransaction };
