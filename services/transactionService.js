const { ethers } = require("ethers");
const { ethProvider, bscProvider, polygonProvider, tronProvider } = require("../config/providers");
const User = require("../models/User.model");
const { redis } = require("../config/redis");
const logger = require("../config/logger");
const { getBestNetwork } = require("./networkService");
const { walletNotFoundMessage } = require("../helpers/commonMessages");

const CACHE_EXPIRATION = 3600; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const MAX_AUTO_TRANSACTION = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
const GAS_LIMIT = 21000; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

async function generateUnsignedTransaction(senderId, username, amount, network) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const [sender, recipient] = await Promise.all([
      User.findOne({ where: { telegramId: senderId } }),
      User.findOne({ where: { username } })
    ]);

    if (!sender || !recipient) {
      return { success: false, error: "‚ö†Ô∏è –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }

    // –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏
    const provider = {
      ETH: ethProvider,
      BSC: bscProvider,
      POLYGON: polygonProvider
    }[network];

    if (!provider) {
      return { success: false, error: "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å" };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const senderBalanceWei = await provider.getBalance(sender.evmWalletAddress);
    const senderBalance = ethers.formatEther(senderBalanceWei);

    if (parseFloat(senderBalance) < amount) {
      return {
        success: false,
        error: `üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${senderBalance} ${network}`
      };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const [nonce, feeData, network] = await Promise.all([
      provider.getTransactionCount(sender.evmWalletAddress),
      provider.getFeeData(),
      provider.getNetwork()
    ]);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const tx = {
      to: recipient.evmWalletAddress,
      value: ethers.parseEther(amount.toString()).toString(),
      gasLimit: ethers.toNumber(GAS_LIMIT),
      gasPrice: feeData.gasPrice.toString(),
      nonce,
      chainId: network.chainId,
    };

    return { success: true, tx };
  } catch (error) {
    logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    return { success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" };
  }
}

async function getRecipientWallet(username, bestNetwork) {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
  const [recipientWallet, recipientTronWallet] = await Promise.all([
    redis.get(`evmWallet:${username}`),
    redis.get(`tronWallet:${username}`)
  ]);

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –±–∞–∑–µ
  if (!recipientWallet && !recipientTronWallet) {
    const recipient = await User.findOne({ where: { username } });
    if (!recipient) return null;

    // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    const cachePromises = [];
    if (recipient.evmWalletAddress) {
      cachePromises.push(
        redis.set(`evmWallet:${username}`, recipient.evmWalletAddress, "EX", CACHE_EXPIRATION)
      );
    }
    if (recipient.tronWalletAddress) {
      cachePromises.push(
        redis.set(`tronWallet:${username}`, recipient.tronWalletAddress, "EX", CACHE_EXPIRATION)
      );
    }
    await Promise.all(cachePromises);

    return determineWalletNetwork(
      recipient.evmWalletAddress,
      recipient.tronWalletAddress,
      bestNetwork
    );
  }

  return determineWalletNetwork(recipientWallet, recipientTronWallet, bestNetwork);
}

function determineWalletNetwork(evmWallet, tronWallet, bestNetwork) {
  if (bestNetwork === "TRON" && tronWallet) {
    return { address: tronWallet, network: "TRON" };
  }
  if (["ETH", "BSC", "POLYGON"].includes(bestNetwork) && evmWallet) {
    return { address: evmWallet, network: "EVM" };
  }
  return evmWallet ? { address: evmWallet, network: "EVM" } :
    tronWallet ? { address: tronWallet, network: "TRON" } : null;
}

async function handleTransaction(ctx) {
  try {
    const args = ctx.message.text.split(" ");
    if (args.length !== 3) {
      await ctx.reply("üëâ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏: /send <—Å—É–º–º–∞> @username");
      return;
    }

    const amount = parseFloat(args[1]);
    const username = args[2].replace("@", "");
    const senderId = ctx.from.id;

    if (username === ctx.from.username) {
      await ctx.reply("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å USDT —Å–∞–º–æ–º—É —Å–µ–±–µ");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—É–º–º—ã
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const [senderWallet, senderTronWallet] = await Promise.all([
      redis.get(`evmWallet:${senderId}`),
      redis.get(`tronWallet:${senderId}`)
    ]);

    if (!senderWallet && !senderTronWallet) {
      const sender = await User.findOne({ where: { telegramId: senderId } });
      if (!sender || (!sender.evmWalletAddress && !sender.tronWalletAddress)) {
        const { text, options } = walletNotFoundMessage;
        await ctx.replyWithMarkdown(text, options);
        return;
      }

      // –ö—ç—à–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      if (sender.evmWalletAddress) {
        await redis.set(`evmWallet:${senderId}`, sender.evmWalletAddress, "EX", CACHE_EXPIRATION);
      }
      if (sender.tronWalletAddress) {
        await redis.set(`tronWallet:${senderId}`, sender.tronWalletAddress, "EX", CACHE_EXPIRATION);
      }
    }

    const bestNetwork = await getBestNetwork();
    const recipientWallet = await getRecipientWallet(username, bestNetwork);

    if (!recipientWallet) {
      await ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª –∫–æ—à–µ–ª–µ–∫ –∫ –±–æ—Ç—É. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /connect –ª–∏–±–æ /create");
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ TRON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (bestNetwork === "TRON") {
      await handleTronTransaction(ctx, amount, username, senderTronWallet, recipientWallet.address);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ EVM —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    await handleEvmTransaction(ctx, amount, username, senderWallet, recipientWallet, bestNetwork);

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleTransaction: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleTronTransaction(ctx, amount, username, senderWallet, recipientAddress) {
  try {
    const senderBalance = await tronProvider.trx.getBalance(senderWallet);
    const amountTron = tronProvider.toSun(amount);

    if (senderBalance < amountTron) {
      await ctx.reply(`üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TRX. –ë–∞–ª–∞–Ω—Å: ${senderBalance / 1e6} TRX`);
      return;
    }

    const tx = await tronProvider.transactionBuilder.sendTrx(
      recipientAddress,
      amountTron,
      senderWallet
    );
    const signedTx = await tronProvider.trx.sign(tx);
    const result = await tronProvider.trx.sendRawTransaction(signedTx);

    if (result.result) {
      await ctx.reply(
        `üí∏ ${amount} USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Tron (TRC-20) @${username}!\n` +
        `üîç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ TronScan](https://tronscan.org/#/transaction/${result.txid})`
      );
      logger.info(`–£—Å–ø–µ—à–Ω–∞—è Tron —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${senderId} -> ${username}, amount: ${amount}, tx: ${result.txid}`);
    } else {
      throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ Tron —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    await ctx.reply("üîÑ –°–µ—Ç—å Tron –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleEvmTransaction(ctx, amount, username, senderWallet, recipientWallet, network) {
  const provider = {
    ETH: ethProvider,
    BSC: bscProvider,
    POLYGON: polygonProvider
  }[network];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  const senderBalanceWei = await provider.getBalance(senderWallet);
  const senderBalance = ethers.formatEther(senderBalanceWei);

  if (parseFloat(senderBalance) < amount) {
    await ctx.reply(`üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å –≤ ${network}: ${senderBalance}`);
    return;
  }

  // –î–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  if (amount > MAX_AUTO_TRANSACTION) {
    const txData = await generateUnsignedTransaction(ctx.from.id, username, amount, network);
    if (!txData.success) {
      await ctx.reply(txData.error);
      return;
    }

    await ctx.reply(
      `üîê *–ü–æ–¥–ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask/WalletConnect*\n\n` +
      `üìÑ *Raw Transaction JSON:*\n\`${JSON.stringify(txData.tx, null, 2)}\`\n\n` +
      `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ JSON\n` +
      `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ –≤ MetaMask\n` +
      `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —á–∞—Ç`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // –î–ª—è –º–∞–ª—ã—Ö —Å—É–º–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  try {
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const tx = await wallet.sendTransaction({
      to: recipientWallet.address,
      value: ethers.parseEther(amount.toString()),
    });

    await tx.wait();
    const explorerUrl = {
      ETH: "etherscan.io",
      BSC: "bscscan.com",
      POLYGON: "polygonscan.com"
    }[network];

    await ctx.reply(
      `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} USDT —á–µ—Ä–µ–∑ ${network} @${username}!\n` +
      `üîó [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è](https://${explorerUrl}/tx/${tx.hash})`
    );
    logger.info(`–£—Å–ø–µ—à–Ω–∞—è ${network} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${ctx.from.id} -> ${username}, amount: ${amount}, tx: ${tx.hash}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ ${network} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

module.exports = { handleTransaction };