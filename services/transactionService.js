const logger = require("../config/logger");
const { redis } = require("../config/redis");
const { getBestNetwork, getProvider, getExplorerUrl } = require("./transactionService/networkService");
const {
  calculateServiceFee,
  calculateNetworkFee,
  getWalletBalance,
  getTransactionConfirmMessage
} = require("./transactionService/feeService");
const { checkWallets, getWalletForNetwork } = require("./transactionService/checkWallets");
const { executeTransaction, prepareUnsignedTransaction } = require("./transactionService/transactionExecutor");
const FEE_CONFIG = require("../config/feeConfig");

async function validateInput(ctx) {
  const args = ctx.message.text.split(" ");
  if (args.length !== 3) {
    return {
      success: false,
      message: "üëâ –ü—Ä–∏–º–µ—Ä: /send <—Å—É–º–º–∞> @username"
    };
  }

  const amount = parseFloat(args[1]);
  const username = args[2].replace("@", "");
  const senderId = ctx.from.id;

  if (isNaN(amount)) {
    return {
      success: false,
      message: "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
    };
  }

  if (amount <= 0) {
    return {
      success: false,
      message: "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
    };
  }

  return {
    success: true,
    data: { amount, username, senderId }
  };
}

async function handleSuccessfulTransaction(ctx, result) {
  const explorerUrl = getExplorerUrl(result.network, result.txHash);
  await ctx.reply(
    `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
    `üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–µ: ${explorerUrl}\n\n` +
    `üîç –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \`${result.txHash}\``,
    { parse_mode: "Markdown" }
  );
}

async function executeAutoTransaction(ctx, txData) {
  const result = await executeTransaction(txData);

  if (result.success) {
    await handleSuccessfulTransaction(ctx, result);
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await redis.del(`pending_tx:${ctx.from.id}`);
  } else {
    await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result.error}`);
  }
}

async function prepareManualTransaction(ctx, txData) {
  try {
    const { tx, network } = await prepareUnsignedTransaction(txData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await redis.set(
      `unsigned_tx:${ctx.from.id}`,
      JSON.stringify({ tx, network }),
      "EX",
      300
    );

    await ctx.reply(
      "üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ MetaMask/WalletConnect:\n\n" +
      `–°–µ—Ç—å: ${network}\n` +
      `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${txData.recipientWallet}\n` +
      `–°—É–º–º–∞: ${txData.amount} USDT\n` +
      `–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏: ${txData.networkFee} USDT\n` +
      `–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: ${txData.serviceFee} USDT`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: "üîë –ü–æ–¥–ø–∏—Å–∞—Ç—å", callback_data: "sign_tx" },
            { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_tx" }
          ]]
        }
      }
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleTransaction(ctx) {
  try {
    const validation = await validateInput(ctx);

    if (!validation.success) {
      await ctx.reply(validation.message);
      return;
    }

    const { amount, username, senderId } = validation.data;

    if (ctx.from.username === username) {
      await ctx.reply("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ");
      return;
    }

    const walletCheck = await checkWallets(ctx, senderId, username);

    if (!walletCheck) {
      await ctx.reply("‚ö†Ô∏è –ù–∏ —É –≤–∞—Å, –Ω–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞");
      return;
    }

    const { senderWallets, recipientWallets } = walletCheck;

    const bestNetwork = await getBestNetwork();
    const provider = getProvider(bestNetwork);

    const [serviceFee, networkFee] = await Promise.all([
      calculateServiceFee(amount),
      calculateNetworkFee(bestNetwork, provider)
    ]);

    const totalAmount = amount + serviceFee + parseFloat(networkFee);

    const senderWallet = getWalletForNetwork(senderWallets, bestNetwork);
    const recipientWallet = getWalletForNetwork(recipientWallets, bestNetwork);

    if (!senderWallet || !recipientWallet) {
      await ctx.reply("‚ö†Ô∏è –ù–∏ —É –≤–∞—Å, –Ω–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞");
      return;
    }

    // 5Ô∏è‚É£ Check balance
    const balance = await getWalletBalance(senderWallet, bestNetwork);

    if (balance < totalAmount) {
      await ctx.reply(
        `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${totalAmount} USDT\n–î–æ—Å—Ç—É–ø–Ω–æ: ${balance} USDT`
      );
      return;
    }

    // 6Ô∏è‚É£ Show confirmation message
    const confirmMessage = getTransactionConfirmMessage(
      amount,
      username,
      bestNetwork,
      serviceFee,
      networkFee
    );

    await ctx.reply(confirmMessage.text, confirmMessage.options);

    // Save transaction data to Redis
    await redis.set(
      `pending_tx:${ctx.from.id}`,
      JSON.stringify({
        amount,
        serviceFee,
        networkFee,
        totalAmount,
        username,
        network: bestNetwork,
        recipientWallet,
        senderWallet
      }),
      "EX",
      300
    );

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleTransaction: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleTransactionConfirmation(ctx) {
  try {
    const userId = ctx.from.id;
    const transactionData = await redis.get(`pending_tx:${userId}`);

    if (!transactionData) {
      await ctx.reply("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥.");
      return;
    }

    const txData = JSON.parse(transactionData);

    // 7Ô∏è‚É£ Process based on amount
    if (txData.amount <= FEE_CONFIG.TRANSACTION.AUTO_LIMIT) {
      await executeAutoTransaction(ctx, txData);
    } else {
      await prepareManualTransaction(ctx, txData);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleTransactionCancel(ctx) {
  try {
    await redis.del(`pending_tx:${ctx.from.id}`);
    await ctx.reply("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
  }
}

module.exports = {
  handleTransaction,
  handleTransactionConfirmation,
  handleTransactionCancel
};