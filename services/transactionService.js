const { ethers } = require("ethers");
const { ethProvider } = require("../config/providers");
const User = require("../models/User.model");
const logger = require("../config/logger");

async function generateUnsignedTransaction(senderId, username, amount) {
  try {
    const sender = await User.findOne({ where: { telegramId: senderId } });
    const recipient = await User.findOne({ where: { username } });

    if (!sender || !recipient) {
      return { success: false, error: "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }

    const senderBalanceWei = await ethProvider.getBalance(sender.walletAddress);
    const senderBalance = ethers.formatEther(senderBalanceWei);

    if (parseFloat(senderBalance) < amount) {
      return { success: false, error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" };
    }

    const nonce = await ethProvider.getTransactionCount(sender.walletAddress, "latest");
    const feeData = await ethProvider.getFeeData();
    const gasPrice = feeData.gasPrice;
    const amountWei = ethers.parseEther(amount.toString());

    const tx = {
      to: recipient.walletAddress,
      value: amountWei.toString(),
      gasLimit: ethers.toNumber(21000),
      gasPrice: gasPrice.toString(),
      nonce,
      chainId: await ethProvider.getNetwork().then((n) => n.chainId),
    };

    return { success: true, tx };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function sendSignedTransaction(senderId, rawSignedTx) {
  try {
    const sender = await User.findOne({ where: { telegramId: senderId } });
    if (!sender) {
      return { success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
    }

    const txResponse = await ethProvider.sendTransaction(rawSignedTx);
    await txResponse.wait();

    return { success: true, txHash: txResponse.hash };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function handleTransaction(ctx) {
  const args = ctx.message.text.split(" ");
  if (args.length !== 3) {
    await ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <—Å—É–º–º–∞> <@username>");
    return;
  }

  const amount = parseFloat(args[1]);
  const username = args[2].replace("@", "");
  const senderId = ctx.from.id;

  const sender = await User.findOne({ where: { telegramId: senderId } });
  if (!sender) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect");
    return;
  }

  const recipient = await User.findOne({ where: { username } });
  if (!recipient) {
    await ctx.reply("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–º–æ—â—å—é /connect");
    return;
  }

  const senderBalanceWei = await ethProvider.getBalance(sender.walletAddress);
  const senderBalance = ethers.formatEther(senderBalanceWei);
  if (parseFloat(senderBalance) < amount) {
    await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${senderBalance} ETH`);
    return;
  }

  if (amount > 100) {
    const txData = await generateUnsignedTransaction(senderId, username, amount);
    if (!txData.success) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${txData.error}`);
      return;
    }

    await ctx.reply(
      `üîê *–ü–æ–¥–ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask/WalletConnect*\n\n` +
      `üìÑ *Raw Transaction JSON:*\n\`${JSON.stringify(txData.tx, null, 2)}\`\n\n` +
      `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç JSON\n` +
      `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ MetaMask\n` +
      `3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–Ω–µ`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  try {
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, ethProvider);
    const tx = await wallet.sendTransaction({
      to: recipient.walletAddress,
      value: ethers.parseEther(amount.toString()),
    });

    await tx.wait();
    await ctx.reply(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} ETH @${username}!\nüîó [–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è](https://etherscan.io/tx/${tx.hash})`);
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –æ—Ç–ø—Ä–∞–≤–∏–ª ${amount} ETH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}. TX: ${tx.hash}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç ${senderId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}: ${error.message}`);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function handleSignedTransaction(ctx) {
  const senderId = ctx.from.id;
  const rawSignedTx = ctx.message.text.trim();

  if (!rawSignedTx.startsWith("0x")) {
    return;
  }

  const result = await sendSignedTransaction(senderId, rawSignedTx);
  if (!result.success) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
    return;
  }

  await ctx.reply(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ](https://etherscan.io/tx/${result.txHash})`);
}

module.exports = { handleTransaction, handleSignedTransaction };
