const { redis } = require("../config/redis");
const User = require("../models/User.model");
const { Wallet } = require("ethers");
const { messageCreator } = require("../helpers/messageCreator");

const createdWallet = (wallet )=> messageCreator([
  {
    title: "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω!*",
  },
  {
    title: "üìç *–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:*",
    items: [
      wallet
    ]
  },
  {
    title: "‚ö†Ô∏è *–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!*",
    items: [
      "üîπ –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ",
      "üîπ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ",
      "üîπ –ü–æ—Ç–µ—Ä—è –∫–ª—é—á–∞ = –ø–æ—Ç–µ—Ä—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—à–µ–ª—å–∫—É"
    ]
  },
  {
    title: "üí≥ *–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*",
    items: [
      "/send amount `@user` ‚Äì –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ USDT",
      "/invoice amount ‚Äì –ü–æ–ª—É—á–∏—Ç—å USDT",
      "/balance ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    ]
  },
  {
    title: "üîë *–í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á ‚Üì*"
  }
])

const walletExistsMessage = (existingWallet) => messageCreator([
  {
    title: "‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫*",
  },
  {
    title: `üìç *–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:* \n${existingWallet}`,
  },
  {
    title: "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫:",
    items: [
      "*1.* –û—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π ‚Üí `/disconnect`",
      "*2.* –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π ‚Üí `/create`"
    ]
  }
]);

const walletCreationErrorMessage = messageCreator([
  {
    title: "‚ùó*–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫*",
    items: [
      "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫.",
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    ]
  }
], [
  [{ text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url: "https://t.me/cryptapaysupport" }]
]);

async function createWallet(ctx) {
  const chatId = ctx.from.id;
  const username = ctx.from.username || null;

  let existingWallet = await redis.get(`wallet:${chatId}`);
  if (!existingWallet) {
    const user = await User.findOne({ where: { telegramId: chatId } });
    if (user) {
      existingWallet = user.walletAddress;
      await redis.set(`wallet:${chatId}`, existingWallet, 'EX', 3600);
    }
  }

  if (existingWallet) {
    const { text, options} = walletExistsMessage(existingWallet);
    await ctx.replyWithMarkdown(text, options);

    return;
  }

  try {
    const wallet = Wallet.createRandom();
    await User.create({ telegramId: chatId, walletAddress: wallet.address, username });
    await redis.set(`wallet:${chatId}`, wallet.address, 'EX', 3600);

    const { text, options} = createdWallet(wallet.address);
    await ctx.replyWithMarkdown(text, options);

    await ctx.reply(wallet.privateKey);
  } catch (error) {
    const { text, options} = walletCreationErrorMessage;
    await ctx.replyWithMarkdown(text, options);
  }
}

module.exports = { createWallet };
