function getConnectWalletMessage(type, params = {}) {
  const network = params.network ? params.network : "UNKNOWN";
  const address = params.address || "N/A";

  const messages = {
    selectNetwork: {
      text: "üåê *–ö –∫–∞–∫–æ–π —Å–µ—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –≤–∞—à –∫–æ—à–µ–ª–µ–∫?*",
      options: {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "EVM (Ethereum, BSC, Polygon)", callback_data: "connect_wallet_evm" }],
            [{ text: "TRON (TRC-20)", callback_data: "connect_wallet_tron" }]
          ]
        }
      }
    },

    walletExists: {
      text: `‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ ${network === 'evm' ? 'EVM' : 'TRON'}*\n\n` +
        `üí≥ *–ê–¥—Ä–µ—Å:* \`${address}\`\n\n` +
        `üí° –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π`,
      options: {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{
              text: `üîå –û—Ç–∫–ª—é—á–∏—Ç—å`,
              callback_data: `disconnect_wallet_${network || "unknown"}`
            }]
          ]
        }
      }
    },

    enterAddress: {
      text: `‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ *${network === 'evm' ? 'EVM' : 'TRON'}*-–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏`,
      options: {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: params.buttons || []
        }
      }
    },

    invalidAddress: {
      text: `‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å*\n\n –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ ${network === "evm" ? "EVM-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x)" : "TRON-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å T)"}`,
      options: {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: params.buttons || []
        }
      }
    },

    walletConnected: {
      text: `üèÜ –í–∞—à *${network}* –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω`,
      options: { parse_mode: "Markdown" }
    },
  };

  return messages[type] || { text: "Message not found", options: { parse_mode: "Markdown" } };
}

module.exports = {
  getConnectWalletMessage
};
